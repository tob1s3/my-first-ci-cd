name: CI/CD Pipeline with SAST

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      # Шаг 1: Получаем код из репозитория
      - name: Checkout code
        uses: actions/checkout@v4

      # Шаг 2: Настраиваем окружение Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # Шаг 3: Устанавливаем зависимости (включая flake8)
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest bandit flake8 trivy

      # Шаг 4: Запускаем проверку стиля кода (flake8)
      - name: Run flake8 Code Linter
        run: |
          echo "=== Running flake8 Code Style Check ==="
          flake8 . --count --show-source --statistics --max-line-length=100

      # Шаг 5: Запускаем SAST-сканер (Bandit) для анализа исходного кода
      - name: Run Bandit SAST Scan
        run: |
          echo "=== Running Bandit Security Scan ==="
          bandit -r . --severity-level high --confidence-level high -f json -o bandit_results.json || true

      # Шаг 5.1: Сохраняем отчет Bandit как артефакт
      - name: Upload Bandit Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-security-report
          path: bandit_results.json

      # Шаг 5.2: Анализируем отчет Bandit и "валим" пайплайн при критических уязвимостях
      - name: Check Bandit Results
        id: bandit-check
        run: |
          echo "=== Analyzing Bandit Results ==="
          if [ -f bandit_results.json ]; then
            # Ищем в отчете результаты с высоким уровнем серьезности (HIGH)
            if jq -e '.results[] | select(.issue_confidence == "HIGH" and .issue_severity == "HIGH")' bandit_results.json; then
              echo "Bandit found critical vulnerabilities! Failing the pipeline."
              exit 1
            else
              echo "No critical vulnerabilities found by Bandit."
            fi
          else
            echo "Bandit report not found. Assuming no issues."
          fi

      # Шаг 6: Запускаем сканер зависимостей Trivy
      - name: Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'HIGH,CRITICAL'

      # Шаг 7: Запускаем наши unit-тесты
      - name: Run Tests with pytest
        run: |
          echo "=== Running Unit Tests ==="
          python -m pytest tests/ -v

  # Задание 3: Добавляем задачу для сборки (зависит от успешного выполнения security-scan)
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: security-scan # Эта job запустится, ТОЛЬКО если security-scan успешна
    if: success() # Дополнительная проверка на успех

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build Application
        run: |
          echo "=== Building the Application ==="
          echo "All security checks passed successfully!"
          echo "Dependencies installed and verified"
          echo "Code style check: PASSED"
          echo "Security scan: PASSED"
          echo "Dependency vulnerability check: PASSED"
          echo "Unit tests: PASSED"
          echo "Application is ready for deployment"

      - name: Simulate Deployment
        run: |
          echo "=== Simulating Deployment to Production ==="
          echo "Starting deployment process..."
          echo "Deployment checklist:"
          echo "  Code quality: PASSED"
          echo "  Security scan: PASSED"
          echo "  Dependency check: PASSED"
          echo "  Tests: PASSED"
          echo "  Build: SUCCESSFUL"
          echo "Deployment simulation completed successfully!"
          echo "Application would now be available at: http://localhost:5000"