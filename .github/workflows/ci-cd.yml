name: CI/CD Pipeline with SAST

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      # Шаг 1: Получаем код из репозитория
      - name: Checkout code
        uses: actions/checkout@v4

      # Шаг 2: Настраиваем окружение Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # Шаг 3: Устанавливаем зависимости
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest
          pip install bandit
          pip install flake8
          pip install jq

      # Шаг 4: Запускаем проверку стиля кода (flake8)
      - name: Run flake8 code style check
        run: |
          flake8 . --count --statistics --exit-zero

      # Шаг 5: Запускаем SAST-сканер (Bandit) для анализа исходного кода
      - name: Run Bandit SAST Scan
        run: |
          bandit -r . --severity-level high --confidence-level high -f json -o bandit_results.json
        # Опции:
        #-r . - рекурсивно сканировать текущую директорию
        # --severity-level high - показывать только уязвимости уровня HIGH
        # --confidence-level high - показывать только уязвимости с высоким уровнем достоверности
        # -f json -o ... - вывести результат в файл в формате JSON
        # || true - это костыль, чтобы шаг не "падал" при найденных уязвимостях.
        # Мы обработаем результат на следующем шаге.

      # Шаг 5.1: Сохраняем отчет Bandit как артефакт
      - name: Upload Bandit Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-security-report
          path: bandit_results.json
          retention-days: 30

      # Шаг 5.2: Анализируем отчет Bandit и "валим" пайплайн при критических уязвимостях
      - name: Check Bandit Results
        id: bandit-check
        run: |
          if [ -f bandit_results.json ]; then
            echo "Checking Bandit results for critical vulnerabilities..."
            
            # Устанавливаем jq для парсинга JSON
            sudo apt-get update && sudo apt-get install -y jq
            
            # Проверяем наличие HIGH severity и HIGH confidence уязвимостей
            CRITICAL_COUNT=$(jq '.results[] | select(.issue_confidence == "HIGH" and .issue_severity == "HIGH") | .issue_text' bandit_results.json | wc -l)
            
            if [ "$CRITICAL_COUNT" -gt 0 ]; then
              echo "❌ Bandit found $CRITICAL_COUNT critical vulnerabilities!"
              echo "Critical issues found:"
              jq '.results[] | select(.issue_confidence == "HIGH" and .issue_severity == "HIGH") | "File: \(.filename) | Line: \(.line_number) | Issue: \(.issue_text)"' bandit_results.json
              exit 1
            else
              echo "✅ No critical vulnerabilities found by Bandit."
            fi
          else
            echo "⚠️ Bandit report not found. Assuming no issues."
          fi

      # Шаг 6: Запускаем сканер зависимостей Trivy
      - name: Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'HIGH,CRITICAL'

      # Шаг 7: Запускаем наши unit-тесты
      - name: Run Tests with pytest
        run: |
          if [ -d "tests" ]; then
            python -m pytest tests/ -v
          else
            echo "No tests directory found, skipping tests"
          fi

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: security-scan
    if: success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Build Application
        run: |
          echo "Building the application"
          echo "All security checks passed"
          echo "Application ready for deployment"

      - name: Simulate Deployment
        run: |
          echo "Simulating deployment"
          echo "Deployment completed"